// Add Consumable model and update Battle model
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  walletAddress String?   @unique 
  walletType    WalletType?
  email         String?   @unique
  password      String?
  characters    Character[]
  blockedFromBattles Boolean @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Character {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  name          String
  class         CharacterClass
  level         Int       @default(1)
  experience    Int       @default(0)
  health        Int
  maxHealth     Int
  energy        Int
  maxEnergy     Int
  gold          Int       @default(0)
  deck          Card[]
  equipment     Equipment[]
  consumables   Consumable[] // Add consumables relation
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Battle        Battle[]
}

model Card {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  characterId   String    @db.ObjectId
  character     Character @relation(fields: [characterId], references: [id])
  name          String
  description   String
  type          CardType
  rarity        Rarity
  energy        Int
  damage        Int?
  block         Int?
  effects       Effect[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Equipment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  characterId   String    @db.ObjectId
  character     Character @relation(fields: [characterId], references: [id])
  name          String
  description   String
  slot          EquipmentSlot
  rarity        Rarity
  effects       Effect[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// New Consumable model
model Consumable {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  characterId   String    @db.ObjectId
  character     Character @relation(fields: [characterId], references: [id])
  name          String
  description   String
  type          ConsumableType
  value         Int
  duration      Int?
  quantity      Int       @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum ConsumableType {
  HEALTH_POTION
  ENERGY_POTION
  STRENGTH_POTION
  DEXTERITY_POTION
  BLOCK_POTION
  DRAW_POTION
}

enum WalletType {
  ETHEREUM
  SOLANA
}

enum CharacterClass {
  WARRIOR
  MAGE
  ROGUE
}

enum CardType {
  ATTACK
  SKILL
  POWER
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

enum EquipmentSlot {
  HEAD
  CHEST
  HANDS
  FEET
  ACCESSORY
}

type Effect {
  type      String
  value     Int
  duration  Int?
}

model Enemy {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  health        Int
  maxHealth     Int
  level         Int
  moves         Move[]
  experienceReward Int
  goldRewardMin Int
  goldRewardMax Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

type Move {
  name        String
  description String
  damage      Int?
  block       Int?
  effects     Effect[]
  weight      Int
}

model Battle {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  characterId   String    @db.ObjectId
  character     Character @relation(fields: [characterId], references: [id])
  enemyId       String    @db.ObjectId
  battleState   Json
  turnNumber    Int       @default(1)
  playerDeck    Json
  playerHand    Json
  playerDiscardPile Json
  active        Boolean   @default(true)
  rewards       BattleRewards? // Add rewards field
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([characterId, active])
}

type BattleRewards {
  gold          Int
  experience    Int
  cards         CardReward[]
  consumables   ConsumableReward[]
}

type CardReward {
  name          String
  description   String
  type          CardType
  rarity        Rarity
  energy        Int
  damage        Int?
  block         Int?
  effects       Effect[]
}

type ConsumableReward {
  name          String
  description   String
  type          ConsumableType
  value         Int
  duration      Int?
  quantity      Int
}